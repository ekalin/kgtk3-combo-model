#!/usr/bin/perl

# Copyright (C) 2018 Eduardo M KALINOWSKI <eduardo@kalinowski.com.br>.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

use strict;
use warnings;

use Gtk3 -init;
use KGtk3::ComboModel;


sub create_model {
  my $model = Gtk3::TreeStore->new(
   'Glib::Int',
   'Glib::String',
  );
  my $cmodel = KGtk3::ComboModel->new($model);

  my ($iter, $child);

  $iter = $model->append(undef);
  $model->set($iter, 0 => 1, 1 => 'Root 1');

  $iter = $model->append(undef);
  $model->set($iter, 0 => 10, 1 => 'Root 2');
  $child = $model->append($iter);
  $model->set($child, 0 => 11, 1 => 'Child 2.1');
  $child = $model->append($iter);
  $model->set($child, 0 => 23, 1 => 'Child 2.2');
  $child = $model->append($iter);
  $model->set($child, 0 => 30, 1 => 'Child 2.3');

  $iter = $model->append(undef);
  $model->set($iter, 0 => 5, 1 => 'Root 3');
  $child = $model->append($iter);
  $model->set($child, 0 => 6, 1 => 'Child 3.1');
  my $subchild = $model->append($child);
  $model->set($subchild, 0 => 16, 1 => 'Child 3.1.1');
  $child = $model->append($iter);
  $model->set($child, 0 => 7, 1 => 'Child 3.2');

  return $cmodel;
}


sub create_combo {
  my ($model) = @_;

  my $combo = Gtk3::ComboBox->new_with_model($model);

  my $column = Gtk3::CellRendererText->new();
  $combo->pack_start($column, 1);
  $combo->set_attributes($column, "text", 1);

  $combo->set_row_separator_func(sub {
    my ($model, $iter) = @_;
    return $model->get($iter, 2);
  });

  return $combo;
}


my $window = Gtk3::Window->new('toplevel');
$window->signal_connect(delete_event => sub { Gtk3::main_quit() });

my $model = create_model();
my $combo = create_combo($model);

$window->add($combo);

$window->show_all();
Gtk3::main();
